name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  PYTHON_VERSION: "3.13"
  DATABASE_URL: "postgresql+asyncpg://test_user:test_password@localhost:5432/test_db"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run tests with pytest
      run: |
        cd backend
        export PYTHONPATH=$PWD
        python -m pytest tests/ -v --tb=short --disable-warnings
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Test coverage report
      run: |
        cd backend
        export PYTHONPATH=$PWD
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Verify Docker Compose
      run: docker compose version

    - name: Build Docker image
      run: |
        cd backend
        docker build -t notehub-backend:test .

    - name: Test Docker container
      run: |
        cd backend
        # Start services with docker compose
        docker compose up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Test API endpoints
        curl -f http://localhost:8000/docs || exit 1
        curl -f http://localhost:8000/health || echo "Health endpoint not available"
        
        # Stop services
        docker compose down

  docker-compose-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify Docker Compose
      run: docker compose version

    - name: Test with docker compose
      run: |
        cd backend
        # Start all services
        docker compose up -d
        
        # Wait for services
        sleep 45
        
        # Run tests inside container
        docker compose exec -T web python -m pytest tests/ -v
        
        # Cleanup
        docker compose down -v
      env:
        DATABASE_URL: "postgresql+asyncpg://postgres:password@db:5432/notehub_db"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './backend'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        pip install black flake8 isort mypy
        cd backend
        pip install -r requirements.txt

    - name: Run Black formatter check
      run: |
        cd backend
        black --check --diff app/ tests/

    - name: Run isort import sorting check
      run: |
        cd backend
        isort --check-only --diff app/ tests/

    - name: Run flake8 linter
      run: |
        cd backend
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run mypy type checker
      run: |
        cd backend
        mypy app/ --ignore-missing-imports